{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, FormEvent, ChangeEvent } from 'react'\n\ntype FieldType = string | boolean\n\nexport interface FieldState<TField = FieldType> {\n  value: TField\n  isPristine: boolean\n}\n\nexport interface DerivedFieldState<TField = FieldType> {\n  isValid: boolean\n  isValidOrPristine: boolean\n  setValue: (value: TField) => void\n  onChange: (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\n}\n\nexport type FieldValidator<TField, TForm> = (value: TField, form?: TForm) => boolean\n\nexport interface FieldDefinition<TField, TForm> {\n  value: TField\n  isValid?: FieldValidator<TField, TForm>\n}\n\nexport type formFieldBase<TField extends FieldType> = { value: TField; isValid?: FieldValidator<TField, FormBase> }\n\nexport type FormBase = { [name: string]: formFieldBase<string> | formFieldBase<boolean> }\n\nexport type FormDefinition<TForm extends { [name: string]: { value: FieldType } }> = {\n  [F in keyof TForm]: FieldDefinition<TForm[F]['value'], TForm>\n}\n\nexport type FormJson<TForm extends FormBase> = { [F in keyof TForm]: TForm[F]['value'] }\n\nexport type FormState<TForm extends FormBase> = {\n  [F in keyof TForm]: FieldState<TForm[F]['value']>\n}\n\nexport type DerivedFormState<TForm extends FormBase> = {\n  [F in keyof TForm]: FieldState<TForm[F]['value']> & DerivedFieldState<TForm[F]['value']>\n}\n\nexport type Reset<TForm extends FormBase> = (formJson?: FormJson<TForm>) => void\n\nexport type OnSubmit<TForm extends FormBase> = (\n  submitHandler: (formJson: FormJson<TForm>) => void | Promise<void>\n) => (e: FormEvent<HTMLFormElement>) => void\n\nexport const defineForm = <TForm extends FormBase>(definition: TForm): TForm => definition\n\nconst deriveFormState = <TForm extends FormBase>(\n  formDefinition: TForm,\n  formState: FormState<TForm>,\n  setField: (name: string, value: FieldType) => void\n): [DerivedFormState<TForm>, boolean] => {\n  const form: Record<string, DerivedFieldState> = {}\n  let formIsValid = true\n  Object.keys(formDefinition).forEach((fieldName) => {\n    const definition = formDefinition[fieldName]\n    const state = formState[fieldName]\n    const isValid =\n      typeof definition.isValid === 'function' ? (definition.isValid as any)(state.value, formState) : true\n    const isPristine = state.isPristine\n    form[fieldName] = {\n      ...state,\n      isValid,\n      isValidOrPristine: isPristine || isValid,\n      setValue: (value) => setField(fieldName, value),\n      onChange: (event) => {\n        if (event.currentTarget.type === 'radio' && !(event as ChangeEvent<HTMLInputElement>).currentTarget.checked) {\n          return\n        }\n\n        setField(\n          fieldName,\n          event.currentTarget.type === 'checkbox'\n            ? (event as ChangeEvent<HTMLInputElement>).currentTarget.checked\n            : event.currentTarget.value\n        )\n      },\n    }\n    formIsValid = formIsValid && isValid\n  })\n  return [form as DerivedFormState<TForm>, formIsValid]\n}\n\nconst formStateFromDefinition = <TForm extends FormBase>(formDefinition: TForm): FormState<TForm> => {\n  const form: Record<string, FieldState> = {}\n  Object.keys(formDefinition).forEach((fieldName) => {\n    form[fieldName] = {\n      value: formDefinition[fieldName].value,\n      isPristine: true,\n    }\n  })\n  return form as FormState<TForm>\n}\n\nconst formStateFromJson = <TForm extends FormBase>(formJson: FormJson<TForm>): FormState<TForm> => {\n  const form: Record<string, FieldState> = {}\n  Object.keys(formJson).forEach((fieldName) => {\n    form[fieldName] = {\n      value: formJson[fieldName],\n      isPristine: true,\n    }\n  })\n  return form as FormState<TForm>\n}\n\nexport const useForm = <TForm extends FormBase>(\n  formDefinition: TForm\n): {\n  fields: DerivedFormState<TForm>\n  isValid: boolean\n  reset: Reset<TForm>\n  onSubmit: OnSubmit<TForm>\n  formToJson: () => FormJson<TForm>\n} => {\n  const [form, setForm] = useState<FormState<TForm>>(() => formStateFromDefinition(formDefinition))\n\n  const setField = (name: string, value: any) => {\n    setForm({\n      ...form,\n      [name]: {\n        ...form[name],\n        value,\n        isPristine: false,\n      },\n    })\n  }\n\n  const reset = (formJson?: FormJson<TForm>) => {\n    if (formJson) {\n      setForm(formStateFromJson(formJson))\n    } else {\n      setForm(formStateFromDefinition(formDefinition))\n    }\n  }\n\n  const formToJson = (): FormJson<TForm> => {\n    const json: Record<string, FieldType> = {}\n    Object.keys(form).forEach((field) => {\n      json[field] = form[field].value\n    })\n    return json as FormJson<TForm>\n  }\n\n  const [fields, isValid] = deriveFormState(formDefinition, form, setField)\n\n  const clearPristine = () => {\n    if (!isValid) {\n      const dirtyForm: Record<string, FieldState> = {}\n      Object.keys(form).forEach((fieldName) => {\n        dirtyForm[fieldName] = {\n          ...form[fieldName],\n          isPristine: false,\n        }\n      })\n      setForm(dirtyForm as FormState<TForm>)\n    }\n  }\n\n  const onSubmit: OnSubmit<TForm> = (submitHandler) => (e) => {\n    e.preventDefault()\n    clearPristine()\n    if (isValid) {\n      return submitHandler(formToJson())\n    }\n  }\n\n  return {\n    fields,\n    isValid,\n    reset,\n    onSubmit,\n    formToJson,\n  }\n}\n"]}