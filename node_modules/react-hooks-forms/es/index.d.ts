import { FormEvent, ChangeEvent } from 'react';
declare type FieldType = string | boolean;
export interface FieldState<TField = FieldType> {
    value: TField;
    isPristine: boolean;
}
export interface DerivedFieldState<TField = FieldType> {
    isValid: boolean;
    isValidOrPristine: boolean;
    setValue: (value: TField) => void;
    onChange: (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;
}
export declare type FieldValidator<TField, TForm> = (value: TField, form?: TForm) => boolean;
export interface FieldDefinition<TField, TForm> {
    value: TField;
    isValid?: FieldValidator<TField, TForm>;
}
export declare type formFieldBase<TField extends FieldType> = {
    value: TField;
    isValid?: FieldValidator<TField, FormBase>;
};
export declare type FormBase = {
    [name: string]: formFieldBase<string> | formFieldBase<boolean>;
};
export declare type FormDefinition<TForm extends {
    [name: string]: {
        value: FieldType;
    };
}> = {
    [F in keyof TForm]: FieldDefinition<TForm[F]['value'], TForm>;
};
export declare type FormJson<TForm extends FormBase> = {
    [F in keyof TForm]: TForm[F]['value'];
};
export declare type FormState<TForm extends FormBase> = {
    [F in keyof TForm]: FieldState<TForm[F]['value']>;
};
export declare type DerivedFormState<TForm extends FormBase> = {
    [F in keyof TForm]: FieldState<TForm[F]['value']> & DerivedFieldState<TForm[F]['value']>;
};
export declare type Reset<TForm extends FormBase> = (formJson?: FormJson<TForm>) => void;
export declare type OnSubmit<TForm extends FormBase> = (submitHandler: (formJson: FormJson<TForm>) => void | Promise<void>) => (e: FormEvent<HTMLFormElement>) => void;
export declare const defineForm: <TForm extends FormBase>(definition: TForm) => TForm;
export declare const useForm: <TForm extends FormBase>(formDefinition: TForm) => {
    fields: DerivedFormState<TForm>;
    isValid: boolean;
    reset: Reset<TForm>;
    onSubmit: OnSubmit<TForm>;
    formToJson: () => FormJson<TForm>;
};
export {};
