import { useState } from 'react';
export const defineForm = (definition) => definition;
const deriveFormState = (formDefinition, formState, setField) => {
    const form = {};
    let formIsValid = true;
    Object.keys(formDefinition).forEach((fieldName) => {
        const definition = formDefinition[fieldName];
        const state = formState[fieldName];
        const isValid = typeof definition.isValid === 'function' ? definition.isValid(state.value, formState) : true;
        const isPristine = state.isPristine;
        form[fieldName] = Object.assign(Object.assign({}, state), { isValid, isValidOrPristine: isPristine || isValid, setValue: (value) => setField(fieldName, value), onChange: (event) => {
                if (event.currentTarget.type === 'radio' && !event.currentTarget.checked) {
                    return;
                }
                setField(fieldName, event.currentTarget.type === 'checkbox'
                    ? event.currentTarget.checked
                    : event.currentTarget.value);
            } });
        formIsValid = formIsValid && isValid;
    });
    return [form, formIsValid];
};
const formStateFromDefinition = (formDefinition) => {
    const form = {};
    Object.keys(formDefinition).forEach((fieldName) => {
        form[fieldName] = {
            value: formDefinition[fieldName].value,
            isPristine: true,
        };
    });
    return form;
};
const formStateFromJson = (formJson) => {
    const form = {};
    Object.keys(formJson).forEach((fieldName) => {
        form[fieldName] = {
            value: formJson[fieldName],
            isPristine: true,
        };
    });
    return form;
};
export const useForm = (formDefinition) => {
    const [form, setForm] = useState(() => formStateFromDefinition(formDefinition));
    const setField = (name, value) => {
        setForm(Object.assign(Object.assign({}, form), { [name]: Object.assign(Object.assign({}, form[name]), { value, isPristine: false }) }));
    };
    const reset = (formJson) => {
        if (formJson) {
            setForm(formStateFromJson(formJson));
        }
        else {
            setForm(formStateFromDefinition(formDefinition));
        }
    };
    const formToJson = () => {
        const json = {};
        Object.keys(form).forEach((field) => {
            json[field] = form[field].value;
        });
        return json;
    };
    const [fields, isValid] = deriveFormState(formDefinition, form, setField);
    const clearPristine = () => {
        if (!isValid) {
            const dirtyForm = {};
            Object.keys(form).forEach((fieldName) => {
                dirtyForm[fieldName] = Object.assign(Object.assign({}, form[fieldName]), { isPristine: false });
            });
            setForm(dirtyForm);
        }
    };
    const onSubmit = (submitHandler) => (e) => {
        e.preventDefault();
        clearPristine();
        if (isValid) {
            return submitHandler(formToJson());
        }
    };
    return {
        fields,
        isValid,
        reset,
        onSubmit,
        formToJson,
    };
};
//# sourceMappingURL=index.js.map