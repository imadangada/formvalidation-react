{"ast":null,"code":"import { useState } from 'react';\nexport const defineForm = definition => definition;\n\nconst deriveFormState = (formDefinition, formState, setField) => {\n  const form = {};\n  let formIsValid = true;\n  Object.keys(formDefinition).forEach(fieldName => {\n    const definition = formDefinition[fieldName];\n    const state = formState[fieldName];\n    const isValid = typeof definition.isValid === 'function' ? definition.isValid(state.value, formState) : true;\n    const isPristine = state.isPristine;\n    form[fieldName] = Object.assign(Object.assign({}, state), {\n      isValid,\n      isValidOrPristine: isPristine || isValid,\n      setValue: value => setField(fieldName, value),\n      onChange: event => {\n        if (event.currentTarget.type === 'radio' && !event.currentTarget.checked) {\n          return;\n        }\n\n        setField(fieldName, event.currentTarget.type === 'checkbox' ? event.currentTarget.checked : event.currentTarget.value);\n      }\n    });\n    formIsValid = formIsValid && isValid;\n  });\n  return [form, formIsValid];\n};\n\nconst formStateFromDefinition = formDefinition => {\n  const form = {};\n  Object.keys(formDefinition).forEach(fieldName => {\n    form[fieldName] = {\n      value: formDefinition[fieldName].value,\n      isPristine: true\n    };\n  });\n  return form;\n};\n\nconst formStateFromJson = formJson => {\n  const form = {};\n  Object.keys(formJson).forEach(fieldName => {\n    form[fieldName] = {\n      value: formJson[fieldName],\n      isPristine: true\n    };\n  });\n  return form;\n};\n\nexport const useForm = formDefinition => {\n  const [form, setForm] = useState(() => formStateFromDefinition(formDefinition));\n\n  const setField = (name, value) => {\n    setForm(Object.assign(Object.assign({}, form), {\n      [name]: Object.assign(Object.assign({}, form[name]), {\n        value,\n        isPristine: false\n      })\n    }));\n  };\n\n  const reset = formJson => {\n    if (formJson) {\n      setForm(formStateFromJson(formJson));\n    } else {\n      setForm(formStateFromDefinition(formDefinition));\n    }\n  };\n\n  const formToJson = () => {\n    const json = {};\n    Object.keys(form).forEach(field => {\n      json[field] = form[field].value;\n    });\n    return json;\n  };\n\n  const [fields, isValid] = deriveFormState(formDefinition, form, setField);\n\n  const clearPristine = () => {\n    if (!isValid) {\n      const dirtyForm = {};\n      Object.keys(form).forEach(fieldName => {\n        dirtyForm[fieldName] = Object.assign(Object.assign({}, form[fieldName]), {\n          isPristine: false\n        });\n      });\n      setForm(dirtyForm);\n    }\n  };\n\n  const onSubmit = submitHandler => e => {\n    e.preventDefault();\n    clearPristine();\n\n    if (isValid) {\n      return submitHandler(formToJson());\n    }\n  };\n\n  return {\n    fields,\n    isValid,\n    reset,\n    onSubmit,\n    formToJson\n  };\n};","map":{"version":3,"mappings":"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","names":["useState","defineForm","definition","deriveFormState","formDefinition","formState","setField","form","formIsValid","Object","keys","forEach","fieldName","state","isValid","value","isPristine","isValidOrPristine","setValue","onChange","event","currentTarget","type","checked","formStateFromDefinition","formStateFromJson","formJson","useForm","setForm","name","reset","formToJson","json","field","fields","clearPristine","dirtyForm","onSubmit","submitHandler","e","preventDefault"],"sources":["C:\\Users\\DELL CORE i3\\Desktop\\React-Projects\\formvalidation\\node_modules\\react-hooks-forms\\src\\index.ts"],"sourcesContent":["import { useState, FormEvent, ChangeEvent } from 'react'\n\ntype FieldType = string | boolean\n\nexport interface FieldState<TField = FieldType> {\n  value: TField\n  isPristine: boolean\n}\n\nexport interface DerivedFieldState<TField = FieldType> {\n  isValid: boolean\n  isValidOrPristine: boolean\n  setValue: (value: TField) => void\n  onChange: (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\n}\n\nexport type FieldValidator<TField, TForm> = (value: TField, form?: TForm) => boolean\n\nexport interface FieldDefinition<TField, TForm> {\n  value: TField\n  isValid?: FieldValidator<TField, TForm>\n}\n\nexport type formFieldBase<TField extends FieldType> = { value: TField; isValid?: FieldValidator<TField, FormBase> }\n\nexport type FormBase = { [name: string]: formFieldBase<string> | formFieldBase<boolean> }\n\nexport type FormDefinition<TForm extends { [name: string]: { value: FieldType } }> = {\n  [F in keyof TForm]: FieldDefinition<TForm[F]['value'], TForm>\n}\n\nexport type FormJson<TForm extends FormBase> = { [F in keyof TForm]: TForm[F]['value'] }\n\nexport type FormState<TForm extends FormBase> = {\n  [F in keyof TForm]: FieldState<TForm[F]['value']>\n}\n\nexport type DerivedFormState<TForm extends FormBase> = {\n  [F in keyof TForm]: FieldState<TForm[F]['value']> & DerivedFieldState<TForm[F]['value']>\n}\n\nexport type Reset<TForm extends FormBase> = (formJson?: FormJson<TForm>) => void\n\nexport type OnSubmit<TForm extends FormBase> = (\n  submitHandler: (formJson: FormJson<TForm>) => void | Promise<void>\n) => (e: FormEvent<HTMLFormElement>) => void\n\nexport const defineForm = <TForm extends FormBase>(definition: TForm): TForm => definition\n\nconst deriveFormState = <TForm extends FormBase>(\n  formDefinition: TForm,\n  formState: FormState<TForm>,\n  setField: (name: string, value: FieldType) => void\n): [DerivedFormState<TForm>, boolean] => {\n  const form: Record<string, DerivedFieldState> = {}\n  let formIsValid = true\n  Object.keys(formDefinition).forEach((fieldName) => {\n    const definition = formDefinition[fieldName]\n    const state = formState[fieldName]\n    const isValid =\n      typeof definition.isValid === 'function' ? (definition.isValid as any)(state.value, formState) : true\n    const isPristine = state.isPristine\n    form[fieldName] = {\n      ...state,\n      isValid,\n      isValidOrPristine: isPristine || isValid,\n      setValue: (value) => setField(fieldName, value),\n      onChange: (event) => {\n        if (event.currentTarget.type === 'radio' && !(event as ChangeEvent<HTMLInputElement>).currentTarget.checked) {\n          return\n        }\n\n        setField(\n          fieldName,\n          event.currentTarget.type === 'checkbox'\n            ? (event as ChangeEvent<HTMLInputElement>).currentTarget.checked\n            : event.currentTarget.value\n        )\n      },\n    }\n    formIsValid = formIsValid && isValid\n  })\n  return [form as DerivedFormState<TForm>, formIsValid]\n}\n\nconst formStateFromDefinition = <TForm extends FormBase>(formDefinition: TForm): FormState<TForm> => {\n  const form: Record<string, FieldState> = {}\n  Object.keys(formDefinition).forEach((fieldName) => {\n    form[fieldName] = {\n      value: formDefinition[fieldName].value,\n      isPristine: true,\n    }\n  })\n  return form as FormState<TForm>\n}\n\nconst formStateFromJson = <TForm extends FormBase>(formJson: FormJson<TForm>): FormState<TForm> => {\n  const form: Record<string, FieldState> = {}\n  Object.keys(formJson).forEach((fieldName) => {\n    form[fieldName] = {\n      value: formJson[fieldName],\n      isPristine: true,\n    }\n  })\n  return form as FormState<TForm>\n}\n\nexport const useForm = <TForm extends FormBase>(\n  formDefinition: TForm\n): {\n  fields: DerivedFormState<TForm>\n  isValid: boolean\n  reset: Reset<TForm>\n  onSubmit: OnSubmit<TForm>\n  formToJson: () => FormJson<TForm>\n} => {\n  const [form, setForm] = useState<FormState<TForm>>(() => formStateFromDefinition(formDefinition))\n\n  const setField = (name: string, value: any) => {\n    setForm({\n      ...form,\n      [name]: {\n        ...form[name],\n        value,\n        isPristine: false,\n      },\n    })\n  }\n\n  const reset = (formJson?: FormJson<TForm>) => {\n    if (formJson) {\n      setForm(formStateFromJson(formJson))\n    } else {\n      setForm(formStateFromDefinition(formDefinition))\n    }\n  }\n\n  const formToJson = (): FormJson<TForm> => {\n    const json: Record<string, FieldType> = {}\n    Object.keys(form).forEach((field) => {\n      json[field] = form[field].value\n    })\n    return json as FormJson<TForm>\n  }\n\n  const [fields, isValid] = deriveFormState(formDefinition, form, setField)\n\n  const clearPristine = () => {\n    if (!isValid) {\n      const dirtyForm: Record<string, FieldState> = {}\n      Object.keys(form).forEach((fieldName) => {\n        dirtyForm[fieldName] = {\n          ...form[fieldName],\n          isPristine: false,\n        }\n      })\n      setForm(dirtyForm as FormState<TForm>)\n    }\n  }\n\n  const onSubmit: OnSubmit<TForm> = (submitHandler) => (e) => {\n    e.preventDefault()\n    clearPristine()\n    if (isValid) {\n      return submitHandler(formToJson())\n    }\n  }\n\n  return {\n    fields,\n    isValid,\n    reset,\n    onSubmit,\n    formToJson,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}